openapi: 3.0.3
info:
  title: WASAText API Specification
  description: |
    This document defines the API for WASAText, an application that allows users to chat one-on-one or in groups,
    share text messages and GIFs, and manage conversations.
  version: "1.0.0"
servers:
  - url: https://api.wasatext.example.com
    description: Production server
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "user-identifier"
  schemas:
    UserLogin:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Maria
          pattern: "^.*?$"
          minLength: 3
          maxLength: 16
    UserIdentifier:
      type: object
      properties:
        identifier:
          type: string
          example: "abcdef012345"
    UserNameUpdate:
      type: object
      required:
        - newName
      properties:
        newName:
          type: string
          example: "NewMaria"
          minLength: 3
          maxLength: 16
    ConversationSummary:
      type: object
      properties:
        conversationId:
          type: string
          example: "conv123"
        name:
          type: string
          description: "Username or group name"
          example: "JohnDoe"
        photoUrl:
          type: string
          example: "https://example.com/photos/johndoe.jpg"
        latestMessageTime:
          type: string
          format: date-time
          example: "2025-01-31T15:04:05Z"
        preview:
          type: string
          description: "Snippet of the latest text message or an icon indicator if it is a photo"
          example: "Hey, how are you?"
    Message:
      type: object
      properties:
        messageId:
          type: string
          example: "msg001"
        sender:
          type: string
          example: "JohnDoe"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-31T15:04:05Z"
        content:
          type: string
          example: "Hello!"
        status:
          type: string
          description: "For sent messages: one checkmark for delivered, two for read."
          example: "delivered"
        reactions:
          type: array
          items:
            type: object
            properties:
              reaction:
                type: string
                example: "üëç"
              by:
                type: string
                example: "JaneDoe"
    MessageSend:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          example: "Hi there!"
        replyTo:
          type: string
          description: "Optional messageId if replying to a message"
          example: "msg001"
    MessageForward:
      type: object
      required:
        - targetConversationId
      properties:
        targetConversationId:
          type: string
          example: "conv456"
    MessageComment:
      type: object
      required:
        - reaction
      properties:
        reaction:
          type: string
          description: "Emoticon representing the comment"
          example: "üòÇ"
    GroupMembersUpdate:
      type: object
      required:
        - members
      properties:
        members:
          type: array
          description: "List of usernames to add"
          items:
            type: string
          example: ["Alice", "Bob"]
    GroupNameUpdate:
      type: object
      required:
        - newGroupName
      properties:
        newGroupName:
          type: string
          example: "Weekend Buddies"
    PhotoUpdate:
      type: object
      required:
        - photoUrl
      properties:
        photoUrl:
          type: string
          description: "URL to the new photo"
          example: "https://example.com/photos/newphoto.jpg"

paths:
  /session:
    post:
      tags:
        - login
      summary: Logs in or registers a user
      description: |
        If the user does not exist, they are created and logged in.
        If the user exists, they are logged in.
      operationId: doLogin
      requestBody:
        description: User login details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '201':
          description: User login action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentifier'
  /user/username:
    put:
      tags:
        - user
      summary: Update the current user‚Äôs username
      description: Update your username to a new one (if not already taken).
      operationId: setMyUserName
      security:
        - BearerAuth: []
      requestBody:
        description: New username details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNameUpdate'
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentifier'
  /conversations:
    get:
      tags:
        - conversations
      summary: Retrieve the list of conversations for the logged-in user
      description: Returns a list of conversations, sorted in reverse chronological order.
      operationId: getMyConversations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of conversation summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConversationSummary'
  /conversations/{conversationId}:
    get:
      tags:
        - conversations
      summary: Retrieve the details of a conversation
      description: Returns all exchanged messages in the conversation in reverse chronological order.
      operationId: getConversation
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the conversation.
      responses:
        '200':
          description: Conversation details with messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversation:
                    $ref: '#/components/schemas/ConversationSummary'
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
  /conversations/{conversationId}/messages:
    post:
      tags:
        - messages
      summary: Send a new message in a conversation
      description: Send a message, optionally as a reply to an existing message.
      operationId: sendMessage
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the conversation.
      requestBody:
        description: Message payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageSend'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /messages/{messageId}/forward:
    post:
      tags:
        - messages
      summary: Forward an existing message to another conversation
      description: Forward a message from one conversation to another.
      operationId: forwardMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the message to forward.
      requestBody:
        description: Forwarding details, including target conversation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageForward'
      responses:
        '200':
          description: Message forwarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /messages/{messageId}/comments:
    post:
      tags:
        - messages
      summary: Comment (react to) a message
      description: Add a reaction to a message.
      operationId: commentMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the message to comment on.
      requestBody:
        description: Comment (reaction) details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageComment'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    delete:
      tags:
        - messages
      summary: Remove a comment (reaction) from a message
      description: Delete your reaction (comment) from a message.
      operationId: uncommentMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the message.
        - name: commentId
          in: query
          required: true
          schema:
            type: string
          description: Identifier of the comment to remove.
      responses:
        '204':
          description: Comment removed successfully
  /messages/{messageId}:
    delete:
      tags:
        - messages
      summary: Delete a sent message
      description: Remove a message that you have sent.
      operationId: deleteMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the message to delete.
      responses:
        '204':
          description: Message deleted successfully
  /groups/{groupId}/members:
    post:
      tags:
        - groups
      summary: Add members to a group
      description: Add one or more users to an existing group.
      operationId: addToGroup
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the group.
      requestBody:
        description: List of members to add to the group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMembersUpdate'
      responses:
        '200':
          description: Members added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  groupId:
                    type: string
                    example: "group123"
  /groups/{groupId}/members/me:
    delete:
      tags:
        - groups
      summary: Leave a group
      description: The current user leaves the specified group.
      operationId: leaveGroup
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the group.
      responses:
        '204':
          description: Left the group successfully
  /groups/{groupId}/name:
    put:
      tags:
        - groups
      summary: Update the group name
      description: Change the name of a group.
      operationId: setGroupName
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the group.
      requestBody:
        description: New group name details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupNameUpdate'
      responses:
        '200':
          description: Group name updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  groupId:
                    type: string
                    example: "group123"
                  groupName:
                    type: string
                    example: "New Group Name"
  /user/photo:
    put:
      tags:
        - user
      summary: Update the current user‚Äôs profile photo
      description: Change the URL of your profile photo.
      operationId: setMyPhoto
      security:
        - BearerAuth: []
      requestBody:
        description: New photo URL
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhotoUpdate'
      responses:
        '200':
          description: Profile photo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoUrl:
                    type: string
                    example: "https://example.com/photos/newphoto.jpg"
  /groups/{groupId}/photo:
    put:
      tags:
        - groups
      summary: Update the group photo
      description: Change the URL of the group photo.
      operationId: setGroupPhoto
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the group.
      requestBody:
        description: New group photo URL
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhotoUpdate'
      responses:
        '200':
          description: Group photo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoUrl:
                    type: string
                    example: "https://example.com/photos/newgroupphoto.jpg"
  /{anyPath}:
    options:
      summary: CORS Preflight
      description: |
        Responds to CORS preflight requests.
        Allows all origins with a max age of 1 second.
      parameters:
        - in: path
          name: anyPath
          required: true
          schema:
            type: string
          style: simple
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "GET, POST, PUT, DELETE, OPTIONS"
            Access-Control-Max-Age:
              schema:
                type: integer
                example: 1

security:
  - BearerAuth: []
