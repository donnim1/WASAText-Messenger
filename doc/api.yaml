openapi: 3.0.3
info:
  title: WASAText API
  version: "1.0.0"
  description: >
    This document defines the API for the WASAText messaging application.
    It includes endpoints for user login, updating user details,
    managing conversations, sending messages, and handling group operations.
servers:
  - url: https://localhost:3000
    description: Local development server
tags:
  - name: login
    description: Endpoints for user authentication
  - name: user
    description: Endpoints for user profile management
  - name: conversations
    description: Endpoints for managing conversations
  - name: messages
    description: Endpoints for messaging operations
  - name: groups
    description: Endpoints for group management

paths:
  /session:
    post:
      tags:
        - login
      summary: Logs in or registers a user
      description: >
        If the user does not exist, they are created and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: postSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for logging in
              required:
                - name
              properties:
                name:
                  type: string
                  description: The username. Must be 3–16 characters with letters, numbers, underscores, or hyphens.
                  minLength: 3
                  maxLength: 16
                  pattern: "^[a-zA-Z0-9_-]+$"
                  example: "alice"
      responses:
        '200':
          description: User exists; returns existing identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '201':
          description: New user created; returns newly generated identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalError'

  /user/username:
    put:
      tags:
        - user
      summary: Update the current user's username
      description: Updates the username of the authenticated user.
      operationId: setMyUserName
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for updating username
              required:
                - newName
              properties:
                newName:
                  type: string
                  description: New username (3–16 characters)
                  minLength: 3
                  maxLength: 16
                  pattern: "^[a-zA-Z0-9_-]+$"
                  example: "newAlice"
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /user/photo:
    put:
      tags:
        - user
      summary: Update the current user's profile photo
      description: Updates the profile photo URL for the authenticated user.
      operationId: setMyPhoto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for updating profile photo
              required:
                - photoUrl
              properties:
                photoUrl:
                  type: string
                  description: The URL of the new profile photo. Must be a valid HTTPS URL.
                  format: uri
                  pattern: "^https://.+$"
                  minLength: 10
                  maxLength: 2048
                  example: "https://example.com/photo.jpg"
      responses:
        '200':
          description: Profile photo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /conversation/myconversations:
    get:
      tags:
        - conversations
      summary: Retrieve all conversations for the authenticated user
      description: Retrieves a list of conversation summaries for the authenticated user.
      operationId: getMyConversations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: object
                description: A list of conversation summaries.
                required:
                  - conversations
                properties:
                  conversations:
                    type: array
                    description: An array of conversation objects.
                    minItems: 0
                    maxItems: 1000
                    items:
                      $ref: '#/components/schemas/Conversation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /conversations/{conversationId}:
    get:
      tags:
        - conversations
      summary: Retrieve a specific conversation
      description: Retrieves the details and messages for a given conversation.
      operationId: getConversation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: conversationId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The unique identifier of the conversation.
      responses:
        '200':
          description: Conversation details and messages
          content:
            application/json:
              schema:
                type: object
                description: An object containing the conversation and its messages.
                required:
                  - conversation
                  - messages
                properties:
                  conversation:
                    $ref: '#/components/schemas/Conversation'
                  messages:
                    type: array
                    description: A list of messages in the conversation.
                    minItems: 0
                    maxItems: 1000
                    items:
                      $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /messages:
    post:
      tags:
        - messages
      summary: Send a message
      description: >
        Sends a new message. For private chats, if no conversation exists, one is auto-created.
      operationId: sendMessage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for sending a message.
              required:
                - content
                - isGroup
              properties:
                receiverId:
                  type: string
                  description: Receiver user ID (for private messages).
                  format: uuid
                  pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                  minLength: 36
                  maxLength: 36
                  example: "123e4567-e89b-12d3-a456-426614174000"
                content:
                  type: string
                  description: The message content.
                  minLength: 1
                  maxLength: 5000
                  pattern: ".*"
                  example: "Hello, world!"
                isGroup:
                  type: boolean
                  description: Indicates whether this is a group message.
                  example: false
                groupId:
                  type: string
                  description: Group ID (required when isGroup is true).
                  format: uuid
                  pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                  minLength: 36
                  maxLength: 36
                  example: "123e4567-e89b-12d3-a456-426614174001"
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                description: Contains the new message ID.
                required:
                  - messageId
                properties:
                  messageId:
                    type: string
                    description: Unique identifier of the sent message.
                    format: uuid
                    pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                    minLength: 36
                    maxLength: 36
                    example: "123e4567-e89b-12d3-a456-426614174002"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /messages/{messageId}/forward:
    post:
      tags:
        - messages
      summary: Forward a message
      description: Forwards an existing message to another conversation.
      operationId: forwardMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The ID of the message to forward.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for forwarding a message.
              required:
                - targetConversationId
              properties:
                targetConversationId:
                  type: string
                  description: The target conversation ID.
                  format: uuid
                  pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                  minLength: 36
                  maxLength: 36
                  example: "123e4567-e89b-12d3-a456-426614174003"
      responses:
        '200':
          description: Message forwarded successfully
          content:
            application/json:
              schema:
                type: object
                description: Contains the forwarded message ID.
                required:
                  - messageId
                properties:
                  messageId:
                    type: string
                    description: Unique identifier of the forwarded message.
                    format: uuid
                    pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                    minLength: 36
                    maxLength: 36
                    example: "123e4567-e89b-12d3-a456-426614174004"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /messages/{messageId}/comments:
    post:
      tags:
        - messages
      summary: Add a comment to a message
      description: Adds a reaction (comment) to a message.
      operationId: commentMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The ID of the message to comment on.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for adding a comment.
              required:
                - reaction
              properties:
                reaction:
                  type: string
                  description: Reaction text (e.g., an emoji).
                  minLength: 1
                  maxLength: 5
                  pattern: "^.{1,5}$"
                  example: "👍"
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /messages/{messageId}/delete:
    delete:
      tags:
        - messages
      summary: Delete a message
      description: Deletes a message if the authenticated user is the sender.
      operationId: deleteMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The ID of the message to delete.
      responses:
        '200':
          description: Message deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /messages/{messageId}/status/{status}:
    post:
      tags:
        - messages
      summary: Update message status
      description: Updates the status of a message to delivered or read.
      operationId: updateMessageStatus
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The unique identifier of the message.
        - in: path
          name: status
          required: true
          schema:
            type: string
            enum:
              - delivered
              - read
          description: The new status of the message.
      responses:
        '200':
          description: Message status updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    $ref: '#/components/schemas/Uuid'
                  status:
                    type: string
                    example: "read"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /group:
    post:
      tags:
        - groups
      summary: Create a new group
      description: Creates a new group conversation and automatically adds the creator as a member.
      operationId: createGroup
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for creating a group.
              required:
                - groupName
              properties:
                groupName:
                  type: string
                  description: The name of the new group.
                  minLength: 3
                  maxLength: 50
                  pattern: "^[\\w\\s-]+$"
                  example: "Friends Group"
                groupPhoto:
                  type: string
                  description: Optional URL for the group photo.
                  format: uri
                  pattern: "^https://.+$"
                  minLength: 10
                  maxLength: 2048
                  example: "https://example.com/group-photo.jpg"
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                type: object
                description: Contains the newly created group ID.
                required:
                  - groupId
                properties:
                  groupId:
                    type: string
                    description: Unique identifier of the created group.
                    format: uuid
                    pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                    minLength: 36
                    maxLength: 36
                    example: "123e4567-e89b-12d3-a456-426614174005"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /groups/{groupId}/members:
    post:
      tags:
        - groups
      summary: Add a user to a group
      description: Adds a user to the specified group.
      operationId: addToGroup
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The group's unique identifier.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload to add a user to a group.
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: The ID of the user to add.
                  format: uuid
                  pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                  minLength: 36
                  maxLength: 36
                  example: "123e4567-e89b-12d3-a456-426614174006"
      responses:
        '200':
          description: User added to group successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /groups/{groupId}/leave:
    delete:
      tags:
        - groups
      summary: Leave a group
      description: Removes the authenticated user from the specified group.
      operationId: leaveGroup
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The group's unique identifier.
      responses:
        '200':
          description: Left group successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /groups/{groupId}/name:
    put:
      tags:
        - groups
      summary: Update group name
      description: Updates the name of a group.
      operationId: setGroupName
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The group's unique identifier.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for updating group name.
              required:
                - newName
              properties:
                newName:
                  type: string
                  description: The new group name.
                  minLength: 3
                  maxLength: 50
                  pattern: "^[\\w\\s-]+$"
                  example: "New Group Name"
      responses:
        '200':
          description: Group name updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /groups/{groupId}/photo:
    put:
      tags:
        - groups
      summary: Update group photo
      description: Updates the photo URL of a group.
      operationId: setGroupPhoto
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The group's unique identifier.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payload for updating group photo.
              required:
                - photoUrl
              properties:
                photoUrl:
                  type: string
                  description: The new group photo URL.
                  format: uri
                  pattern: "^https://.+$"
                  minLength: 10
                  maxLength: 2048
                  example: "https://example.com/newgroupphoto.jpg"
      responses:
        '200':
          description: Group photo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /users:
    get:
      tags:
        - user
      summary: Retrieve list of users
      description: Retrieves a list of all users. This endpoint can be used to search for users when starting new conversations.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                description: An object containing the list of users.
                required:
                  - users
                properties:
                  users:
                    type: array
                    description: Array of user objects.
                    items:
                      $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/InternalError'

  /conversationsfor/{receiverId}:
    get:
      tags:
        - conversations
      summary: Retrieve conversation by receiver
      description: Retrieves the conversation between the authenticated user and the specified receiver. If no conversation exists, an appropriate error is returned.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: receiverId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The unique identifier of the receiver.
      responses:
        '200':
          description: Conversation retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /messages/{messageId}/uncomment:
    delete:
      tags:
        - messages
      summary: Remove a comment from a message
      description: Removes a comment (reaction) from a message. The authenticated user may only remove their own comment.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
          description: The unique identifier of the message from which the comment will be removed.
      responses:
        '200':
          description: Comment removed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /groups:
    get:
      tags:
        - groups
      summary: List groups
      description: Retrieves a list of groups the authenticated user is a member of.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of groups retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                description: An object containing the list of groups.
                required:
                  - groups
                properties:
                  groups:
                    type: array
                    description: Array of group conversations.
                    items:
                      $ref: '#/components/schemas/Conversation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        JWT token obtained from the /session endpoint.
        Include the token in the Authorization header as "Bearer <token>".
  schemas:
    User:
      type: object
      description: A user profile.
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          description: The username.
          example: "alice"
        photoUrl:
          type: string
          format: uri
          description: URL to the user's profile photo.
          example: "https://example.com/alice.jpg"
    Uuid:
      type: string
      format: uuid
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      minLength: 36
      maxLength: 36
      description: A universally unique identifier.
    UserResponse:
      type: object
      description: Response containing a user's identifier.
      required:
        - identifier
      properties:
        identifier:
          $ref: '#/components/schemas/Uuid'
    SuccessResponse:
      type: object
      description: A response indicating a successful operation.
      required:
        - message
      properties:
        message:
          type: string
          description: A success message.
          minLength: 1
          maxLength: 200
          pattern: ".*"
          example: "Operation completed successfully"
    ErrorResponse:
      type: object
      description: Response containing error details.
      required:
        - error
        - details
      properties:
        error:
          type: string
          description: A brief error message.
          minLength: 1
          maxLength: 200
          pattern: ".*"
          example: "Invalid request parameters"
        details:
          type: array
          description: Additional error details.
          minItems: 0
          maxItems: 100
          items:
            type: string
            description: An error detail.
            minLength: 1
            maxLength: 500
            pattern: ".*"
          example: ["Field 'name' must be between 3 and 16 characters"]
    Conversation:
      type: object
      description: A conversation summary.
      required:
        - id
        - isGroup
        - createdAt
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          description: The name of the conversation or group.
          minLength: 1
          maxLength: 100
          pattern: ".*"
          example: "Group Chat"
        isGroup:
          type: boolean
          description: Indicates whether the conversation is a group chat.
          example: true
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the conversation was created.
          minLength: 20
          maxLength: 30
          example: "2025-02-06T12:00:00Z"
        photoUrl:
          type: string
          format: uri
          description: URL of the group photo (for group chats).
          pattern: "^https://.+$"
          minLength: 10
          maxLength: 2048
          example: "https://example.com/group-photo.jpg"
        lastMessage:
          $ref: '#/components/schemas/Message'
        unreadCount:
          type: integer
          description: Number of unread messages.
          minimum: 0
          example: 5
    Message:
      type: object
      description: A message in a conversation.
      required:
        - id
        - conversationId
        - senderId
        - content
        - sentAt
        - reactions
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        conversationId:
          $ref: '#/components/schemas/Uuid'
        senderId:
          $ref: '#/components/schemas/Uuid'
        content:
          type: string
          description: The content of the message.
          minLength: 1
          maxLength: 5000
          pattern: ".*"
          example: "Hello!"
        replyTo:
          type: string
          description: Identifier of the message being replied to.
          format: uuid
          pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          minLength: 36
          maxLength: 36
          example: "123e4567-e89b-12d3-a456-426614174021"
        sentAt:
          type: string
          format: date-time
          description: Timestamp when the message was sent.
          minLength: 20
          maxLength: 30
          example: "2025-02-06T12:05:00Z"
        editedAt:
          type: string
          format: date-time
          description: Timestamp when the message was edited.
          minLength: 20
          maxLength: 30
          example: "2025-02-06T12:10:00Z"
        reactions:
          type: array
          description: List of reactions for the message.
          minItems: 0
          maxItems: 100
          items:
            type: object
            description: A reaction on the message.
            required:
              - userId
              - reaction
            properties:
              userId:
                $ref: '#/components/schemas/Uuid'
              reaction:
                type: string
                description: The reaction (emoji or text).
                minLength: 1
                maxLength: 5
                pattern: "^.{1,5}$"
                example: "👍"
              createdAt:
                type: string
                format: date-time
                description: Timestamp when the reaction was created.
                minLength: 20
                maxLength: 30
                example: "2025-02-06T12:06:00Z"
  responses:
    BadRequest:
      description: Invalid request parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Authentication token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    TooManyRequests:
      description: Rate limit exceeded.
      headers:
        Retry-After:
          schema:
            type: integer
          description: Number of seconds to wait before retrying.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
