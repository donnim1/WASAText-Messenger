openapi: 3.0.3
info:
  title: WASAText API
  version: "1.0.0"
  description: >
    This document defines the API for the WASAText messaging application.
    It includes endpoints for user login, updating user details,
    managing conversations, sending messages, and handling group operations.
servers:
  - url: https://localhost:3000
    description: Local development server

paths:
  /session:
    post:
      tags:
        - login
      summary: Logs in or registers a user
      description: >
        If the user does not exist, they are created and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: postSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 16
                  pattern: "^[a-zA-Z0-9_-]+$"
                  example: "alice"
      responses:
        '200':
          description: User exists; returns existing identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '201':
          description: New user created; returns newly generated identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalError'

  /user/username:
    put:
      tags:
        - user
      summary: Update the current user's username
      description: Updates the username of the authenticated user.
      operationId: setMyUserName
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newName
              properties:
                newName:
                  type: string
                  minLength: 3
                  maxLength: 16
                  pattern: "^[a-zA-Z0-9_-]+$"
                  example: "newAlice"
      responses:
        '200':
          description: Username updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /user/photo:
    put:
      tags:
        - user
      summary: Update the current user's profile photo
      description: Updates the profile photo URL for the authenticated user.
      operationId: setMyPhoto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - photoUrl
              properties:
                photoUrl:
                  type: string
                  format: uri
                  pattern: "^https://.+$"
                  example: "https://example.com/photo.jpg"
      responses:
        '200':
          description: Profile photo updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /conversation/myconversations:
    get:
      tags:
        - conversations
      summary: Retrieve all conversations for the authenticated user
      description: Retrieves a list of conversations that the authenticated user is part of.
      operationId: getMyConversations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of conversations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /conversations/{conversationId}:
    get:
      tags:
        - conversations
      summary: Retrieve a specific conversation
      description: Retrieves conversation details and its messages.
      operationId: getConversation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: conversationId
          required: true
          schema:
            type: string
            format: uuid
          description: The conversation's unique identifier.
      responses:
        '200':
          description: Conversation details and messages.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversation:
                    $ref: '#/components/schemas/Conversation'
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /message:
    post:
      tags:
        - messages
      summary: Send a message
      description: >
        Sends a new message. For private chats, if no conversation exists, one is auto-created.
      operationId: sendMessage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - isGroup
              properties:
                receiverId:
                  type: string
                  format: uuid
                  description: Required for private messages
                  example: "receiver-uuid"
                content:
                  type: string
                  minLength: 1
                  maxLength: 5000
                  example: "Hello, world!"
                isGroup:
                  type: boolean
                  example: false
                groupId:
                  type: string
                  format: uuid
                  description: Required when isGroup is true
                  example: "group-uuid"
      responses:
        '201':
          description: Message sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                    format: uuid
                    example: "message-uuid"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /message/{messageId}/forward:
    post:
      tags:
        - messages
      summary: Forward a message
      description: Forwards an existing message to another conversation.
      operationId: forwardMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the message to forward.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - targetConversationId
              properties:
                targetConversationId:
                  type: string
                  format: uuid
                  example: "target-conversation-uuid"
      responses:
        '200':
          description: Message forwarded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                    format: uuid
                    example: "new-forwarded-message-uuid"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /message/{messageId}/comment:
    post:
      tags:
        - messages
      summary: Comment on a message
      description: Adds a reaction (comment) to a message.
      operationId: commentMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the message to comment on.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reaction
              properties:
                reaction:
                  type: string
                  minLength: 1
                  maxLength: 5
                  example: "üëç"
      responses:
        '201':
          description: Comment added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /message/{messageId}/delete:
    delete:
      tags:
        - messages
      summary: Delete a message
      description: Deletes a message if the authenticated user is the sender.
      operationId: deleteMessage
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the message to delete.
      responses:
        '200':
          description: Message deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /groups/add:
    post:
      tags:
        - groups
      summary: Add a user to a group
      description: Adds the authenticated user to the specified group.
      operationId: addToGroup
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupId
              properties:
                groupId:
                  type: string
                  format: uuid
                  example: "group-uuid"
      responses:
        '200':
          description: User added to group successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /groups/leave:
    delete:
      tags:
        - groups
      summary: Leave a group
      description: Removes the authenticated user from the specified group.
      operationId: leaveGroup
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupId
              properties:
                groupId:
                  type: string
                  format: uuid
                  example: "group-uuid"
      responses:
        '200':
          description: Left group successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /groups/name:
    put:
      tags:
        - groups
      summary: Update group name
      description: Updates the name of a group.
      operationId: setGroupName
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupId
                - newName
              properties:
                groupId:
                  type: string
                  format: uuid
                  example: "group-uuid"
                newName:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: "^[\\w\\s-]+$"
                  example: "New Group Name"
      responses:
        '200':
          description: Group name updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /groups/photo:
    put:
      tags:
        - groups
      summary: Update group photo
      description: Updates the photo URL of a group.
      operationId: setGroupPhoto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupId
                - photoUrl
              properties:
                groupId:
                  type: string
                  format: uuid
                  example: "group-uuid"
                photoUrl:
                  type: string
                  format: uri
                  pattern: "^https://.+$"
                  example: "https://example.com/newgroupphoto.jpg"
      responses:
        '200':
          description: Group photo updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
          
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        JWT token obtained from /session endpoint.
        Token should be included in the Authorization header as "Bearer <token>".

  schemas:
    UserResponse:
      type: object
      required:
        - identifier
      properties:
        identifier:
          type: string
          format: uuid
          example: "uuid-of-alice"

    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: "Invalid request parameters"
        details:
          type: array
          items:
            type: string
          example: ["Field 'name' must be between 3 and 16 characters"]

    Conversation:
      type: object
      required:
        - id
        - is_group
        - created_at
      properties:
        id:
          type: string
          format: uuid
          example: "conversation-uuid"
        name:
          type: string
          example: "Group Name or null"
          nullable: true
        is_group:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-02-06T12:00:00Z"
        photo_url:
          type: string
          format: uri
          example: "https://example.com/group-photo.jpg"
          nullable: true
        last_message:
          $ref: '#/components/schemas/Message'
          nullable: true
        unread_count:
          type: integer
          minimum: 0
          example: 5

    Message:
      type: object
      required:
        - id
        - conversation_id
        - sender_id
        - content
        - sent_at
      properties:
        id:
          type: string
          format: uuid
          example: "message-uuid"
        conversation_id:
          type: string
          format: uuid
          example: "conversation-uuid"
        sender_id:
          type: string
          format: uuid
          example: "sender-uuid"
        content:
          type: string
          example: "Hello!"
        reply_to:
          type: string
          format: uuid
          nullable: true
          example: "reply-message-uuid"
        sent_at:
          type: string
          format: date-time
          example: "2025-02-06T12:05:00Z"
        edited_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-02-06T12:10:00Z"
        reactions:
          type: array
          items:
            type: object
            required:
              - user_id
              - reaction
            properties:
              user_id:
                type: string
                format: uuid
                example: "user-uuid"
              reaction:
                type: string
                example: "üëç"
              created_at:
                type: string
                format: date-time
                example: "2025-02-06T12:06:00Z"

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    TooManyRequests:
      description: Rate limit exceeded
      headers:
        Retry-After:
          schema:
            type: integer
          description: Number of seconds to wait before retrying
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'